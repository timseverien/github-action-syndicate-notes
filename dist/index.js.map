{"version":3,"file":"index.js","sources":["../src/lib/cache.ts","../src/lib/sources/jsonfeed.ts","../src/index.ts"],"sourcesContent":["import type { Message } from '@/lib/message';\nimport { isBefore } from 'date-fns';\nimport { parse, stringify } from 'devalue';\nimport * as fs from 'fs-extra';\nimport * as path from 'node:path';\nimport { z } from 'zod';\n\nconst CACHE_FILE_NAME = 'syndicate-notes.json';\n\nconst cacheDataSchema = z.object({\n\tlastSyndicated: z.date(),\n\tsyndicatedItems: z.set(z.string().min(1)),\n});\nexport type CacheData = z.infer<typeof cacheDataSchema>;\n\nfunction getCacheFilePath(directory: string): string {\n\treturn path.relative(directory, CACHE_FILE_NAME);\n}\n\nexport function addMessageToCache(\n\tcache: CacheData,\n\tmessage: Message,\n): CacheData {\n\tconst items = new Set(cache.syndicatedItems);\n\titems.add(message.id);\n\n\treturn {\n\t\tlastSyndicated: new Date(),\n\t\tsyndicatedItems: items,\n\t};\n}\n\nexport function createMessageFilter(cache: CacheData) {\n\treturn (message: Message) => {\n\t\t// Message is explicitly included in syndicated items\n\t\tif (!cache.syndicatedItems.has(message.id)) return false;\n\n\t\t// Message was published before last syndication\n\t\tif (\n\t\t\tmessage.publishDate &&\n\t\t\tisBefore(message.publishDate, cache.lastSyndicated)\n\t\t)\n\t\t\treturn false;\n\n\t\treturn true;\n\t};\n}\n\nexport async function getCache(directory: string): Promise<CacheData> {\n\tconst cacheFilePath = getCacheFilePath(directory);\n\n\ttry {\n\t\tconst buffer = await fs.readFile(cacheFilePath);\n\t\tconst data = parse(buffer.toString());\n\t\treturn cacheDataSchema.parse(data);\n\t} catch {\n\t\treturn {\n\t\t\tlastSyndicated: new Date(),\n\t\t\tsyndicatedItems: new Set(),\n\t\t};\n\t}\n}\n\nexport async function persistCache(directory: string, cache: CacheData) {\n\tconst cacheFilePath = getCacheFilePath(directory);\n\n\ttry {\n\t\tconst data = await fs.writeFile(cacheFilePath, stringify(cache));\n\t\treturn cacheDataSchema.parse(data);\n\t} catch {\n\t\tthrow new Error('Unable to write cache');\n\t}\n}\n","import { z } from 'zod';\nimport type { MessagesFromSourceGetter } from './common.js';\n\nconst jsonFeedAttachmentSchema = z.object({\n\tmime_type: z.string().min(3).includes('/'),\n\turl: z.string().url(),\n\n\ttitle: z.string().optional(),\n\tsize_in_bytes: z.number().optional(),\n\tduration_in_seconds: z.number().optional(),\n});\n\nconst jsonFeedAuthorSchema = z.object({\n\tavatar: z.string().url().optional(),\n\tname: z.string().optional(),\n\turl: z.string().url().optional(),\n});\n\nconst jsonFeedItemSchema = z.object({\n\tid: z.string().min(1),\n\n\t// One of these should be present\n\tcontent_html: z.string().optional(),\n\tcontent_text: z.string().optional(),\n\n\tauthors: jsonFeedAuthorSchema.array().optional(),\n\tbanner_image: z.string().url().optional(),\n\tdate_modified: z.string().datetime().optional(),\n\tdate_published: z.string().datetime().optional(),\n\texternal_url: z.string().url().optional(),\n\timage: z.string().url().optional(),\n\tlanguage: z.string().optional(),\n\tsummary: z.string().optional(),\n\ttags: z.string().array().optional(),\n\ttitle: z.string().optional(),\n\turl: z.string().url().optional(),\n\tattachments: jsonFeedAttachmentSchema.array().optional(),\n});\n\nconst jsonFeedSchema = z.object({\n\tversion: z.string().startsWith('https://jsonfeed.org/version/').url(),\n\ttitle: z.string(),\n\titems: jsonFeedItemSchema.array(),\n\n\tauthors: jsonFeedAuthorSchema.array().optional(),\n\tdescription: z.string().optional(),\n\texpired: z.boolean().optional(),\n\tfavicon: z.string().url().optional(),\n\tfeed_url: z.string().url().optional(),\n\thome_page_url: z.string().url().optional(),\n\ticon: z.string().url().optional(),\n\tlanguage: z.string().optional(),\n\tnext_url: z.string().optional(),\n\tuser_comment: z.string().optional(),\n\n\t// Deprecated: JSON feed 1.0\n\tauthor: jsonFeedAuthorSchema.optional(),\n});\n\nexport const getMessages: MessagesFromSourceGetter = async (\n\turl,\n\t{ format, filter },\n) => {\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tconst json = await response.json();\n\t\tconst feed = jsonFeedSchema.parse(json);\n\n\t\treturn feed.items\n\t\t\t.map((item) => {\n\t\t\t\tconst contentMessage = item.content_text ?? item.content_html ?? '';\n\t\t\t\tconst contentUrl = item.url ?? '';\n\n\t\t\t\treturn {\n\t\t\t\t\tid: item.id,\n\t\t\t\t\tlanguage: item.language ?? feed.language ?? undefined,\n\t\t\t\t\tcontent: format(contentMessage, contentUrl ?? ''),\n\t\t\t\t};\n\t\t\t})\n\t\t\t.filter(filter);\n\t} catch (error) {\n\t\tthrow new Error(`Unable to read feed ${url}`);\n\t}\n};\n","import {\n\taddMessageToCache,\n\tcreateMessageFilter,\n\tgetCache,\n\tpersistCache,\n} from '@/lib/cache';\nimport type { MessagesFromSourceGetter } from '@/lib/sources/common';\nimport { getMessages as getMessagesFromJsonFeed } from '@/lib/sources/jsonfeed';\nimport * as core from '@actions/core';\nimport {\n\ttype PublishOptions as SyndicateOptions,\n\tpublish as syndicate,\n} from '@tsev/social-gateway';\nimport type { Integration } from '@tsev/social-gateway/integrations/common';\nimport { createDiscordIntegration } from '@tsev/social-gateway/integrations/discord/index';\nimport { createMastodonIntegration } from '@tsev/social-gateway/integrations/mastodon/index';\nimport { z } from 'zod';\n\nexport function createIntegrationOrNull<\n\tT extends string,\n\tInputMap = Record<T, string>,\n>(\n\tinputKeys: T[],\n\tfactory: (inputs: InputMap) => Integration,\n): Integration | null {\n\tconst inputs = Object.fromEntries(\n\t\tinputKeys.map((input) => [input, core.getInput(input)]),\n\t) as InputMap;\n\n\tif (!Object.values(inputs as object).every((a) => Boolean(a))) {\n\t\treturn null;\n\t}\n\n\treturn factory(inputs);\n}\n\nconst FEED_KEYS = ['jsonfeed'] as const;\nconst FEED_PARSE_MAP: {\n\t[key in (typeof FEED_KEYS)[number]]: MessagesFromSourceGetter;\n} = {\n\tjsonfeed: getMessagesFromJsonFeed,\n} as const;\n\nconst integrations = [\n\tcreateIntegrationOrNull(\n\t\t['discordWebhookId', 'discordWebhookToken'],\n\t\t(inputs) =>\n\t\t\tcreateDiscordIntegration({\n\t\t\t\twebhookId: inputs.discordWebhookId,\n\t\t\t\twebhookToken: inputs.discordWebhookToken,\n\t\t\t}),\n\t),\n\tcreateIntegrationOrNull(\n\t\t['mastodonInstance', 'mastodonAccessToken'],\n\t\t(inputs) =>\n\t\t\tcreateMastodonIntegration({\n\t\t\t\taccessToken: inputs.mastodonAccessToken,\n\t\t\t\tinstanceUrl: inputs.mastodonInstance,\n\t\t\t}),\n\t),\n];\n\nconst cacheDirectorySchema = z.string().min(1);\nconst contentFormatSchema = z.string().min(1);\nconst feedTypeSchema = z.enum(FEED_KEYS);\nconst feedUrlSchema = z.string().url();\n\ntry {\n\tconst cacheDirectory = cacheDirectorySchema.parse(\n\t\tcore.getInput('cacheDirectory'),\n\t);\n\tconst contentFormat = contentFormatSchema.parse(\n\t\tcore.getInput('contentFormat'),\n\t);\n\tconst feedType = feedTypeSchema.parse(core.getInput('feedType'));\n\tconst feedUrl = new URL(feedUrlSchema.parse(core.getInput('feedUrl')));\n\n\tconst formatMessage = (content: string, url: string) =>\n\t\tcontentFormat\n\t\t\t.replace(/{{content}}/g, content)\n\t\t\t.replace(/{{url}}/g, url)\n\t\t\t.trim();\n\n\tconst cache = await getCache(cacheDirectory);\n\tconst filterMessage = createMessageFilter(cache);\n\n\tconst messages = await FEED_PARSE_MAP[feedType](feedUrl, {\n\t\tfilter: filterMessage,\n\t\tformat: formatMessage,\n\t});\n\n\tconst options: SyndicateOptions = {\n\t\tintegrations: integrations.filter((i): i is Integration => i !== null),\n\t};\n\n\tlet isMessageFailed = false;\n\n\tfor (const message of messages) {\n\t\ttry {\n\t\t\tawait syndicate(message, options);\n\t\t} catch (error) {\n\t\t\tcore.error(`Unable to syndicate message ${message.id}`);\n\t\t\tisMessageFailed = true;\n\t\t}\n\n\t\ttry {\n\t\t\taddMessageToCache(cache, message);\n\t\t\tawait persistCache(cacheDirectory, cache);\n\t\t} catch (error) {\n\t\t\tcore.error('Unable to save to cache');\n\t\t}\n\t}\n\n\tif (isMessageFailed) {\n\t\tthrow new Error('Not all messages were syndicated');\n\t}\n} catch (error) {\n\tcore.setFailed((error as Error).message);\n}\n"],"names":["getMessagesFromJsonFeed","syndicate"],"mappings":"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"}